# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ncent-api # NOTE: update this with your service name
app: ncent-api
tenant: ncntdev

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8
  region: ${opt:region, 'us-west-1'}
  vpc:
    securityGroupIds:
    - ${ssm:/ncnt/production/securitygroup} # sg-007cab286661ef1e9
    subnetIds:
    - ${ssm:/ncnt/production/subnet/1} # subnet-05713e4c4a5b16bae
    - ${ssm:/ncnt/production/subnet/2} # subnet-053aaa3f57d64c76e
  #    Define function environment variables here
  environment:
    database_url: ${ssm:/ncnt/production/database/url~true}
    database_driver: ${ssm:/ncnt/production/database/driver}
    database_user: ${ssm:/ncnt/production/database/user}
    database_password: ${ssm:/ncnt/production/database/password~true}
    bugsnag_api_key: ${ssm:/ncnt/production/bugsnag/apikey~true}
    release_stage: ${ssm:/ncnt/production/release_stage}
  #      database_url: jdbc:mysql://localhost:3306/ncnt
  #      database_driver: com.mysql.jdbc.Driver
  #      database_user: root
  #      database_password: ncntroot

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: target/ncent-api-dev-jar-with-dependencies.jar
  excludeDevDependencies: false

functions:
  user:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /user_test/hello
          method: get
      - schedule: rate(10 minutes)

  dbhealth:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /dbhealth/health
          method: get
      - schedule: rate(10 minutes)

  user_get:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /user
          method: get
      - schedule: rate(10 minutes)

  user_create:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /user
          method: post
      - schedule: rate(10 minutes)

  user_reset:
    handler: kotlinserverless.framework.Handler
    events:
      - http:
          path: /user/reset
          method: patch
      - schedule: rate(10 minutes)

  token_get:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /token
          method: get
      - schedule: rate(10 minutes)

  tokens_get:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /tokens
          method: get
      - schedule: rate(10 minutes)

  token_create:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /token
          method: post
      - schedule: rate(10 minutes)

  token_transfer:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /token/transfer
          method: post
      - schedule: rate(10 minutes)

  reward_pool:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /reward/pool
          method: post
      - schedule: rate(10 minutes)

  reward_create:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /reward
          method: post
      - schedule: rate(10 minutes)

  completion_create:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /completion
          method: post
      - schedule: rate(10 minutes)

  completion_complete:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /completion
          method: put
      - schedule: rate(10 minutes)

  transaction:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /transaction
          method: post
      - schedule: rate(10 minutes)

  challenge_create:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /challenge
          method: post
      - schedule: rate(10 minutes)

  challenge_get:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /challenge
          method: get
      - schedule: rate(10 minutes)

  challenges_get:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /challenges
          method: get
      - schedule: rate(10 minutes)

  challenge_expire:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /challenge/expire
          method: put
      - schedule: rate(10 minutes)

  challenge_invalidate:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /challenge/invalidate
          method: put
      - schedule: rate(10 minutes)

  challenge_validate:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /challenge/validate
          method: put
      - schedule: rate(10 minutes)

  challenge_complete:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /challenge/complete
          method: put
      - schedule: rate(10 minutes)

  challenge_share:
    handler: kotlinserverless.framework.models.Handler
    events:
      - http:
          path: /challenge/share
          method: put
      - schedule: rate(10 minutes)

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
